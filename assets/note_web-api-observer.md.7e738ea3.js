import{o as n,c as s,d as a}from"./app.dbd2c2fe.js";const e='{"title":"现代浏览器ObserverAPI","description":"","frontmatter":{"date":"2021-04-07","title":"现代浏览器ObserverAPI","tags":["WebAPI","ObserverAPI"],"describe":"浏览器Observer简单实例以及案例"},"headers":[{"level":2,"title":"现代浏览器ObserverAPI","slug":"现代浏览器observerapi"},{"level":3,"title":"IntersectionObserver","slug":"intersectionobserver"},{"level":3,"title":"MutationObserver","slug":"mutationobserver"},{"level":3,"title":"ResizeObserver","slug":"resizeobserver"},{"level":3,"title":"Performance Observer","slug":"performance-observer"},{"level":3,"title":"Observer案例","slug":"observer案例"}],"relativePath":"note/web-api-observer.md","lastUpdated":1619745176694}',t={},o=a('<h2 id="现代浏览器observerapi"><a class="header-anchor" href="#现代浏览器observerapi" aria-hidden="true">#</a> 现代浏览器ObserverAPI</h2><ul><li><code>Intersection Observer</code>,交叉观察者.</li><li><code>Mutation Observer</code>,变动观察者.</li><li><code>Resize Observer</code>,视图观察者.</li><li><code>Performance Observer</code>,性能观察者.</li></ul><h3 id="intersectionobserver"><a class="header-anchor" href="#intersectionobserver" aria-hidden="true">#</a> IntersectionObserver</h3><p>todo...</p><h3 id="mutationobserver"><a class="header-anchor" href="#mutationobserver" aria-hidden="true">#</a> MutationObserver</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver" target="_blank" rel="noopener noreferrer"><code>MutationObserver</code></a>接口提供了监视对DOM树所做更改的能力.</p><p>观察Dom属性,子节点以及后代节点的变化</p><div class="language-javascript"><pre><code><span class="token comment">// 选择需要观察变动的节点</span>\n<span class="token keyword">const</span> targetNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;some-id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 观察器的配置（需要观察什么变动）</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> attributes<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> childList<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> subtree<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 当观察到变动时执行的回调函数</span>\n<span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">mutationsList<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Use traditional &#39;for loops&#39; for IE 11</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> mutation <span class="token keyword">of</span> mutationsList<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;childList&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A child node has been added or removed.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;attributes&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The &#39;</span> <span class="token operator">+</span> mutation<span class="token punctuation">.</span>attributeName <span class="token operator">+</span> <span class="token string">&#39; attribute was modified.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建一个观察器实例并传入回调函数</span>\n<span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 以上述配置开始观察目标节点</span>\nobserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 之后，可停止观察</span>\nobserver<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="resizeobserver"><a class="header-anchor" href="#resizeobserver" aria-hidden="true">#</a> ResizeObserver</h3><p>Resize Observer API提供了一种高性能的机制，通过该机制，代码可以监视元素的大小更改，并且每次大小更改时都会向观察者传递通知.</p><p>观察窗口变化</p><div class="language-javascript"><pre><code>      <span class="token keyword">const</span> myObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span><span class="token parameter">entries</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;大小位置&#39;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>contentRect<span class="token punctuation">)</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;监听的DOM&#39;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>target<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      myObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span>\n</code></pre></div><h3 id="performance-observer"><a class="header-anchor" href="#performance-observer" aria-hidden="true">#</a> Performance Observer</h3><p>todo...</p><h3 id="observer案例"><a class="header-anchor" href="#observer案例" aria-hidden="true">#</a> Observer案例</h3><p>MutationObserver + ResizeObserver 实现顶部菜单的自动折叠<a href="https://www.antdv.com/components/menu-cn/#components-menu-demo-top-navigation" target="_blank" rel="noopener noreferrer">Demo</a> <a href="https://github.com/vueComponent/ant-design-vue/blob/0bdaf14d1e6119cf794161ff5be21a681e68ae53/components/vc-menu/DOMWrap.jsx" target="_blank" rel="noopener noreferrer">源码</a></p><p>MutationObserver 找出游戏<a href="https://kolor.moro.es/" target="_blank" rel="noopener noreferrer">KOLOR</a>答案 <a href="https://benhuang.info/2019/02/20/hacking-the-color-picker-game-mutationobserver/" target="_blank" rel="noopener noreferrer">文章</a></p><p>ResizeObserver 实现Vue响应式组件<a href="https://github.com/kelin2025/vue-responsive-components" target="_blank" rel="noopener noreferrer">源码</a></p>',18);t.render=function(a,e,t,p,r,c){return n(),s("div",null,[o])};export default t;export{e as __pageData};
